@model  MVCCompras.Models.Solicitud

@using MVCCompras.Models
@{
  ViewBag.Title = "Edit";
}
@if (ViewBag.Message != null)
{
  <span id="mensaje" style="display:none;">@ViewBag.Message</span>
}

@using (Html.BeginForm("Edit", "Solicituds", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
  @Html.AntiForgeryToken()

  <section id="main-content">
    <section class=" wrapper">
      <div class="col-lg-12">
        <h3 class="page-header"><i class="fa fa-file"></i> Solicitud de Compra</h3>
      </div>

      <div class="row">
        <div class="col-lg-6" id="especificaciones">
          <section class="panel">
            <div class="panel panel-default">
              <div class="panel-heading">
                <div class="pull-left"><h4>Especificaciones</h4></div>
                <div class="clearfix"></div>
              </div>
              <div class="panel-body">
                <div class="padd">
                  <div class="form quick-post">
                    <div class="form-horizontal">
                      @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                      <div class="form-group">
                        @*@Html.LabelFor(model => model.Solicitantes, "Usuario Solicitante", htmlAttributes: new { @class = "control-label col-md-2" })*@
                        <div class="col-md-10">
                          @*@Html.EnumDropDownListFor(model => model.Solicitantes, "Selecciona Solicitante", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Solicitante, "", new { @class = "text-danger" })*@
                          <label class="control-label col-sm-4">Solicitante</label>
                          <input type="text" class="col-sm-6" id="Solicitante" name="Solicitante" readonly="readonly" />
                        </div>
                      </div>

                      <div class="form-group">
                        @Html.LabelFor(model => model.PagadoraID, "Empresa Pagadora", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                          @Html.DropDownList("PagadoraID", null, htmlAttributes: new { @class = "form-control" })
                          @Html.ValidationMessageFor(model => model.PagadoraID, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.ProveedorID, "Proveedor", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                          @Html.DropDownList("ProveedorID", null, htmlAttributes: new { @class = "form-control" })
                          @Html.ValidationMessageFor(model => model.ProveedorID, "", new { @class = "text-danger" })
                        </div>
                      </div>

                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
        <div class="col-lg-6" id="ipago">
          <section class="panel">
            <div class="panel panel-default">
              <div class="panel-heading">
                <div class="pull-left"><h4>Importe a Pagar</h4></div>
                <div class="clearfix"></div>
              </div>
              <div class="panel-body">
                <div class="padd">
                  <div class="form quick-post">
                    <div class="form-horizontal">
                      @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                      <div class="form-group">
                        @Html.LabelFor(model => model.Proveedor, "Moneda", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                          @Html.DropDownList("MonedaID", null, htmlAttributes: new { @class = "form-control" })
                          @Html.ValidationMessageFor(model => model.Proveedor, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.ImporteTotal, "Importe Total", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                          @Html.EditorFor(model => model.ImporteTotal, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", ValueType = true } })
                          @Html.ValidationMessageFor(model => model.ImporteTotal, "", new { @class = "text-danger" })
                        </div>
                      </div>
                      <div class="form-group">
                        @Html.LabelFor(model => model.ImporteLetra, "Importe Letra", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                          @Html.EditorFor(model => model.ImporteLetra, new
                     {
                         htmlAttributes = new { @class = "form-control", @readonly = "readonly" }
                     })
                          @Html.ValidationMessageFor(model => model.ImporteLetra, "", new { @class = "text-danger" })
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
        <div class="col-lg-11" id="fdpago">
          <section class="panel">
            <div class="panel panel-default">
              <div class="panel-heading">
                <div class="pull-left"><h4>Formato de Pago</h4></div>
                <div class="clearfix"></div>
              </div>
              <div class="panel-body">
                <div class="padd">
                  <div class="form quick-post">
                    <div class="form-horizontal">
                      @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                      <div class="form-group">
                        @Html.LabelFor(model => model.FormaPagoID, "Forma de Pago", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-2">
                          @Html.DropDownList("FormaPagoID", null, htmlAttributes: new { @class = "form-control" })
                          @Html.ValidationMessageFor(model => model.FormaPagoID, "", new { @class = "text-danger" })
                        </div>

                        @*@Html.LabelFor(model => model.Proveedor, "Banco", htmlAttributes: new { @class = "control-label col-md-2" })
                          <div class="col-md-10">
                            @Html.DropDownList("BancoID", Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @readonly = "readonly" })
                            @Html.TextBox("BancoID", null, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.Proveedor, "", new { @class = "text-danger" })*@

                        <label class="control-label col-sm-2">Banco</label>
                        <input type="text" class="col-sm-2" id="BancoID" readonly="readonly" />
                        @*</div>*@
                      </div>

                      <div class="form-group">
                        @Html.LabelFor(model => model.Proveedor, "No. Cuenta", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                          @Html.TextBox("CuentaID", null, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                          @Html.ValidationMessageFor(model => model.Proveedor, "", new { @class = "text-danger" })
                        </div>
                      </div>

                      <div class="form-group">
                        @Html.LabelFor(model => model.Proveedor, "CLABE", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                          @Html.TextBox("ClabeID", null, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                          @Html.ValidationMessageFor(model => model.Proveedor, "", new { @class = "text-danger" })
                        </div>
                      </div>

                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>

        <div class="col-lg-11" id="conceptos">
          <section class="panel">
            <div class="panel panel-default">
              <div class="panel-heading">
                <div class="pull-left"><h4>Conceptos</h4></div>
                <div class="clearfix"></div>
              </div>
              <div class="panel-body">
                <div class="padd">
                  <div class="form quick-post">
                    <div class="form-horizontal">
                      @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                      <div class="row">
                        <div class="col-md-12">
                          <table id="tblConcepto" class="table table-responsive table-bordered table-condensed">
                            <thead>
                              <tr>
                                <th>Concepto</th>
                                <th>Descripción</th>
                                <th>Importe</th>
                                <th style="text-align:center">Eliminar</th>
                                <th style="visibility: hidden">tPago</th>
                              </tr>
                            </thead>
                            <tbody>
                              @{int c = 0;
                                string[] concep = new string[ViewBag.pago];
                                foreach (var item in concep)
                                {
                                  <tr>
                                    <td>@(((string[])ViewData["tpago"])[c])</td>
                                    <td>@(((string[])ViewData["concepto"])[c])</td>
                                    <td>@(((string[])ViewData["importe"])[c])</td>
                                    <td align="center"><button type="button" class="eliminar btn btn-danger" href="#"><i class="icon_close_alt2"></i></button></td>
                                    <td style="visibility: hidden">@(((string[])ViewData["idc"])[c])</td>
                                  </tr>
                                  c = c + 1;
                                }

                              }
                            </tbody>
                          </table>
                        </div>
                      </div>

                      <div class="modal fade" id="ModalConcepto" role="dialog">
                        <div class="modal-dialog">
                          <div class="modal-content">
                            <div class="modal-header">
                              <button type="button" class="close" data-dismiss="modal">
                                &times;
                              </button>
                              <h4>Agregar Concepto</h4>
                            </div>
                            <div class="modal-body">
                              <div class="row">
                                <div class="col-md-12">
                                  <div class="form-horizontal">

                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                    <div class="form-group">
                                      @Html.Label("Concepto", htmlAttributes: new { @class = "control-label col-md-2" })
                                      <div class="col-md-10">
                                        @Html.DropDownList("TipoPagoID", null, "Selecciona", htmlAttributes: new { @class = "form-control" })
                                        @*@Html.ValidationMessageFor(model => model.TipoPagoID, "", new { @class = "text-danger" })*@
                                      </div>
                                    </div>

                                    <div class="form-group">
                                      @Html.Label("Descripción", htmlAttributes: new { @class = "control-label col-md-2" })
                                      <div class="col-md-10">
                                        @Html.TextBox("ConceptoID", null, htmlAttributes: new { @class = "form-control", @placeholder = "Descripcion" })
                                        @*@Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })*@
                                      </div>
                                    </div>

                                    <div class="form-group" oninput="Importe.value = ImporteTotal.value">
                                      @Html.Label("Importe", htmlAttributes: new { @class = "control-label col-md-2" })
                                      <div class="col-md-10">
                                        @Html.TextBox("ImporteID", null, htmlAttributes: new { @class = "form-control", ValueType = true, @placeholder = "Solo Numeros" })
                                        @*@Html.ValidationMessageFor(model => model.ImporteParcial, "", new { @class = "text-danger" })*@
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div class="modal-footer">
                              @Html.Hidden("NumConcepto", 0)
                              <div class="row">
                                <div class="col-md-6">
                                  <a href="#" id="btnCancelConcepto"
                                     class="btn btn-danger"
                                     data-dismiss="modal"
                                     role="button">
                                    Cancelar
                                  </a>
                                </div>
                                <div class="col-md-6">
                                  <a href="#" id="btnOkConcepto"
                                     class="btn btn-success"
                                     role="button">Guardar</a>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>


                      <div class="form-group">
                        @Html.LabelFor(model => model.Observacion, "Observaciones", htmlAttributes: new { @class = "col-sm-2" })
                        <div class="col-md-10">
                          @Html.EditorFor(model => model.Observacion, new { htmlAttributes = new { @class = "form-control" } })
                          @Html.ValidationMessageFor(model => model.Observacion, "", new { @class = "text-danger" })
                        </div>
                      </div>

                      <div class="form-group">
                        <div class="col-md-12">
                          <a href="#ModalConcepto" class="btn btn-primary"
                             id="btnAddConcepto" data-toggle="modal"
                             role="button">Agregar Concepto</a>
                        </div>
                      </div>

                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>

        <div class="col-lg-11" id="gastos">
          <section class="panel">
            <div class="panel panel-default">
              <div class="panel-heading">
                <div class="pull-left"><h4>Distrubución de Gastos</h4></div>
                <div class="clearfix"></div>
              </div>
              <div class="panel-body">
                <div class="padd">
                  <div class="form quick-post">
                    <div class="form-horizontal">
                      @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                      <div class="form-group">
                        @Html.LabelFor(model => model.TipoGastoID, "Tipo de Gasto", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                          @Html.DropDownList("TipoGastoID", null, htmlAttributes: new { @class = "form-control" })
                          @Html.ValidationMessageFor(model => model.TipoGastoID, "", new { @class = "text-danger" })
                        </div>
                      </div>

                      <div class="row">
                        <div class="col-md-12">
                          <table id="tblGasto" class="table table-responsive table-bordered table-condensed">
                            <thead>
                              <tr>
                                <th>Cliente</th>
                                <th>Centro de Costos</th>
                                <th>%</th>
                                <th>Importe</th>
                              </tr>
                            </thead>
                            <tbody></tbody>
                          </table>
                        </div>
                      </div>


                      @*<div class="form-group">
                          <div class="col-md-12">
                            <a href="#ModalGasto" class="btn btn-primary"
                               id="btnAddGasto" data-toggle="modal"
                               role="button">Agregar Gasto</a>
                          </div>
                        </div>*@

                    </div>
                  </div>
                </div>


              </div>
            </div>
          </section>
        </div>

        <div class="col-lg-6" id="archivos">
          <section class="panel">
            <div class="panel panel-default">
              <div class="panel-heading">
                <div class="pull-left"><h4>Archivos</h4></div>
                <div class="clearfix"></div>
              </div>
              <div class="panel-body">
                <div class="padd">
                  <div class="form quick-post">
                    <div class="form-horizontal">
                      @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                      <div class="form-group">
                        @Html.LabelFor(model => model.Factura, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                          <input type="file" id="Factura" name="Factura" class="btn btn-primary" multiple="multiple" /><br /><br />
                          @{int j = 0;
                            string[] qry = new string[ViewBag.conf];
                            foreach (var item in qry)
                            {
                              <h4> @(((string[])ViewData["factura"])[j])</h4>

                              j = j + 1;
                            }
                          }
                          @Html.ValidationMessageFor(model => model.Factura, "", new { @class = "text-danger" })
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>

        @{
          ComprasEntities db = new ComprasEntities();
          var esta = (from s in db.Seguimiento
                      where s.SolicitudID == Model.SolicitudID
                      select new { s.EstatusID });
          foreach (var item in esta)
          {
            int st = item.EstatusID;
            ViewBag.estatus = st;
            @Html.Hidden("status", st);
          }

          if (ViewBag.estatus == 1 & Session["idTipoUsuario"].ToString() == "2")

          {
            <div class="col-lg-3">
              <section class="panel">
                <div class="panel panel-default">
                  <div class="panel-heading">
                    <div class="pull-left"><h4>Seguimiento de Solicitud</h4></div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="panel-body">
                    <div class="padd">
                      <div class="form quick-post">
                        <div class="form-horizontal">




                          <div>
                            <label class="control-label col-sm-4">Aprobar Solicitud</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <input id="aprobar" name="valida" type="checkbox" />
                          </div>

                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </section>
            </div>
          }
        }

        @if (ViewBag.estatus == 5)
        {


          <div class="col-lg-3">
            <section class="panel">
              <div class="panel panel-default">
                <div class="panel-heading">
                  <div class="pull-left"><h4>Comprobante</h4></div>
                  <div class="clearfix"></div>
                </div>
                <div class="panel-body">
                  (Haz clic sobre el nombre del archivo para descargarlo)
                  <div class="form-group">
                    <div class="col-md-3">
                      @{int C = 0;
                        string[] comp = new string[ViewBag.conc];
                        foreach (var item in comp)
                        {
                          <h4><a style="color:midnightblue" target="_blank" href="@(((string[])ViewData["ruta"])[C])">@(((string[])ViewData["comprobante"])[C])</a></h4>
                          C = C + 1;
                        }
                      }
                    </div>
                  </div>
                </div>
              </div>
            </section>
          </div>

        }




      </div>
    </section>




    <div class="form-group">
      <div class="col-md-12">
        <input type="submit" value="Guardar" id="guardar" class="btn btn-success" />
      </div>
    </div>

    <div class="form-group col-md-12">
      <div class="btn btn-danger">
        @Html.ActionLink("Cancelar", "Index")
      </div>
    </div>

    @Html.HiddenFor(model => model.SolicitudID)
  </section>

}
<script>
  var total = 0;
  var fila = 0;
  var re = 0;
  $(document).ready(function () {
    if ($("#status").val() >= 2) {
        $('input,select, textarea,button').attr('readonly', 'readonly');
      if ($("#status").val() == 5) {
          $("#comprobante").attr('enabled', 'enabled');
          
      }
    }
    $("#btnCancelConcepto").click(function () {
      $(".concepto").val("");
    });

    $("#btnOkConcepto").click(function () {
      if ((!$.isNumeric($("#ImporteID").val())) || ($("#TipoPagoID").find('option:selected').text() == "Selecciona")) {
        swal("Atención!", "Algun campo esta vacio o es erroneo", "warning");
      } else {
        var impT = $('#ImporteTotal').val();
        if ($('#ImporteID') != 0) {
          var nume = $('#ImporteID').val();
          impT = parseFloat(impT) + parseFloat(nume);
        }
        $('#ImporteTotal').val(impT);

        var n = $('#ImporteTotal').val();
        var m = $('#MonedaID').val();
        if (m == 1) {
          $('#ImporteLetra').val(numeroALetras(n) + ' MXN');
        }
        else {
          $('#ImporteLetra').val(numeroALetras2(n) + ' USD');
        }


        var esvacio = false;
        $(".concepto").each(function () {
          if ($(this).val() == "") {
            esvacio = true;
          }

        });

        if ((esvacio) || (!$.isNumeric($("#ImporteID").val())) || ($("#TipoPagoID").find('option:selected').text() == "Selecciona")) {
          swal("Atención!", "Algun campo esta vacio o es erroneo", "warning");
        }
        else {
          //Agregamos concepto
          var concepto = $("#TipoPagoID").find('option:selected').text();
          var idTipoPago = $("#TipoPagoID").val();
          var descrip = $("#ConceptoID").val();
          var importe = $("#ImporteID").val();
          var nuevoconcepto = 0;
          if (nuevoconcepto >= 0 || importe != 0) {
            //Agregamos el concepto
            var numconcepto = parseInt($("#NumConcepto").val()) + 1;
            $("#NumConcepto").val(numconcepto);
            fila++;
            //Agregamos el concepto a la tabla
            $("#tblConcepto").append(
              "<tr>" +
              "<td><input type='text' style='border:0;background:transparent;' name='concepid'" + numconcepto + " id='concepid'" + numconcepto + " readonly value='" + concepto + "'/>" +
              "</td>" +
              "<td>" +
              "<input type='text' style='border:0;background:transparent;'" +
              " name='descid" + numconcepto + "'" +
              " id='descid" + numconcepto + "'" +
              " value='" + descrip + "'/>" +
              "</td>" + "<td>" +
              "<input type='text' style='border:0;background:transparent;'" +
              " name='importeid" + numconcepto + "'" +
              " id='importeid" + numconcepto + "'" +
              " readonly " +
              " value='" + importe + "'/>" +
              "</td>" + "<td align='center'>" +
              "<button type='button' class='delete btn btn-danger' href='#'><i class='icon_close_alt2'></i></button>" +
              "</td>" +
              "<td style='visibility: hidden'>" +
              "<input type='text' style='border:0;background:transparent;'" +
              " name='idTipoPago" + numconcepto + "'" +
              " id='idTipoPago" + numconcepto + "'" +
              " readonly " +
              " value='" + idTipoPago + "'/>" +
              "</td>" +
              "</tr>"
            );

            $(".concepto").val("");
            $("#Importe").val(nuevoconcepto);

            $('#ImporteID').val(0);
          }
          else {
            swal("Atención!", "Concepto incompleto", "warning");
          }

          $(".delete").off().on("click", function (e) {

            fila = $(this).parents("tr").find("td")[2].innerHTML;
            cantidad = fila.substring(fila.lastIndexOf('v'));
            const regex = /"([^"]*)"|'([^']*)'/g,
              texto = cantidad;
            var grupo,
              resultado = [];
            while ((grupo = regex.exec(texto)) !== null) {
              //si coincide con comillas dobles, el contenido estará en el
              //   grupo[1], con el grupo[2] undefined, y viceversa
              resultado.push(grupo[1] || grupo[2]);
            }
            var importeR = parseFloat(resultado.join("\n"));
            var importeT = $("#ImporteTotal").val();
            re = (importeT) - (importeR);
            $("#ImporteTotal").val(re);
            var n = $('#ImporteTotal').val();
            var m = $('#MonedaID').val();
            if (m == 1) {
              $('#ImporteLetra').val(numeroALetras(n) + ' MXN');
            }
            else {
              $('#ImporteLetra').val(numeroALetras2(n) + ' USD');
            }



            var tr = $(this).closest('tr');
            tr.remove();

          });

        }

      }
    });

    $("#ImporteID").keydown(function (event) {
      if (event.shiftKey) {
        event.preventDefault();
      }

      if (event.keyCode == 110 || event.keyCode == 8) {

      }
      else {

        if (event.keyCode < 95) {
          if (event.keyCode < 48 || event.keyCode > 57) {
            event.preventDefault();
          }
        }
        else {
          if (event.keyCode < 96 || event.keyCode > 105) {
            event.preventDefault();
          }
        }
      }

    });

    $(".eliminar").off().on("click", function () {
      //valores obtendra el dato del td por posciones [0]
      var idconcepto = $(this).parents("tr").find("td")[4].innerHTML;
      var importe = $(this).parents("tr").find("td")[2].innerHTML;
      //swal("Exitoso!!", importe, "success");
      var importeT = $('#ImporteTotal').val();
      var tr = $(this).closest('tr');
      swal({
        title: "Estas seguro de eliminar el concepto?",
        text: "Se borrara de manera permanente!",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Eliminar!",
        cancelButtonText: "Cancelar!",
        closeOnConfirm: false,
        closeOnCancel: false
      }, function (isConfirm) {
        if (isConfirm) {
          tr.remove();
          importeT = parseFloat(importeT) - parseFloat(importe);
          $('#ImporteTotal').val(importeT);
          var id = $("#SolicitudID").val();
          var n = $('#ImporteTotal').val();
          var m = $('#MonedaID').val();
          if (m == 1) {
            $('#ImporteLetra').val(numeroALetras(n) + ' MXN');
          }
          else {
            $('#ImporteLetra').val(numeroALetras2(n) + ' USD');
          }
          var letra = $('#ImporteLetra').val();

          $.ajax({
            url: '../../Solicituds/EliminaConcepto',
            data:
            {
              idSol: id,
              idcon: idconcepto,
              impT: n,
              impL: letra
            },
            datatype: 'json',
            success: function (data) {
            }
          });
          swal("Deleted!", "Your imaginary file has been deleted.", "success");
          // RESUME THE DEFAULT LINK ACTION
          eval(defaultAction);
          return true;
        } else {
          swal("Cancelled", "Your imaginary file is safe :)", "error");
          return false;
        }
      });
    });


    $('#ProveedorID').change(function () {
      var id = $(this).val();
      $.ajax({
        url: '../../Solicituds/DatoCuenta',
        data: { idProv: id },
        datatype: 'json',
        success: function (data) {
          $('#CuentaID').val(data);
        }
      });
      $.ajax({
        url: '../../Solicituds/DatoClabe',
        data: { idProv: id },
        datatype: 'json',
        success: function (data) {
          $('#ClabeID').val(data);
        }
      });
      $.ajax({
        url: '../../Solicituds/DatoBanco',
        data: { idProv: id },
        datatype: 'json',
        success: function (data) {
          $('#BancoID').val(data);
        }
      });
    });


    var id = $('#ProveedorID').val();
    $.ajax({
      url: '../../Solicituds/DatoCuenta',
      data: { idProv: id },
      datatype: 'json',
      success: function (data) {
        $('#CuentaID').val(data);
      }
    });
    $.ajax({
      url: '../../Solicituds/DatoClabe',
      data: { idProv: id },
      datatype: 'json',
      success: function (data) {
        $('#ClabeID').val(data);
      }
    });
    $.ajax({
      url: '../../Solicituds/DatoBanco',
      data: { idProv: id },
      datatype: 'json',
      success: function (data) {
        $('#BancoID').val(data);
      }
    });
    var solte = $('#SolicitudID').val();
    $.ajax({
      url: '../../Solicituds/DatoSol',
      data: { idProv: solte },
      datatype: 'json',
      success: function (data) {
        $('#Solicitante').val(data);
      }
    });

    var moneda = $('#ImporteLetra').val();

    if (moneda.indexOf('MXN') != -1) {
      $('select[id="MonedaID"]').find('option[value="1"]').text("PESOS");
    }
    else {
      $('select[id="MonedaID"]').find('option[value="2"]').text("DOLARES");
    }

    if ($("#mensaje").html().length > 0) {
      var msg = $("#mensaje").html();
      swal("Atención!", msg, "warning");
    }
    if ($("#status").text() == "1") {
      $("#aprobar").show();

    }



  });
</script>


<script>
  $('#aprobar').click(function () {
    var cor = 1;
    $.ajax({
      url: '../../Solicituds/DatoBanco',
      data: { cor: id },
      datatype: 'json',
      success: function (data) {
        $('#BancoID').val(data);
      }
    });
  })
</script>

<script>
  var numeroALetras = (function () {

    function Unidades(num) {

      switch (num) {
        case 1:
          return 'UN';
        case 2:
          return 'DOS';
        case 3:
          return 'TRES';
        case 4:
          return 'CUATRO';
        case 5:
          return 'CINCO';
        case 6:
          return 'SEIS';
        case 7:
          return 'SIETE';
        case 8:
          return 'OCHO';
        case 9:
          return 'NUEVE';
      }

      return '';
    } //Unidades()

    function Decenas(num) {

      let decena = Math.floor(num / 10);
      let unidad = num - (decena * 10);

      switch (decena) {
        case 1:
          switch (unidad) {
            case 0:
              return 'DIEZ';
            case 1:
              return 'ONCE';
            case 2:
              return 'DOCE';
            case 3:
              return 'TRECE';
            case 4:
              return 'CATORCE';
            case 5:
              return 'QUINCE';
            default:
              return 'DIECI' + Unidades(unidad);
          }
        case 2:
          switch (unidad) {
            case 0:
              return 'VEINTE';
            default:
              return 'VEINTI' + Unidades(unidad);
          }
        case 3:
          return DecenasY('TREINTA', unidad);
        case 4:
          return DecenasY('CUARENTA', unidad);
        case 5:
          return DecenasY('CINCUENTA', unidad);
        case 6:
          return DecenasY('SESENTA', unidad);
        case 7:
          return DecenasY('SETENTA', unidad);
        case 8:
          return DecenasY('OCHENTA', unidad);
        case 9:
          return DecenasY('NOVENTA', unidad);
        case 0:
          return Unidades(unidad);
      }
    } //Unidades()

    function DecenasY(strSin, numUnidades) {
      if (numUnidades > 0)
        return strSin + ' Y ' + Unidades(numUnidades)

      return strSin;
    } //DecenasY()

    function Centenas(num) {
      let centenas = Math.floor(num / 100);
      let decenas = num - (centenas * 100);

      switch (centenas) {
        case 1:
          if (decenas > 0)
            return 'CIENTO ' + Decenas(decenas);
          return 'CIEN';
        case 2:
          return 'DOSCIENTOS ' + Decenas(decenas);
        case 3:
          return 'TRESCIENTOS ' + Decenas(decenas);
        case 4:
          return 'CUATROCIENTOS ' + Decenas(decenas);
        case 5:
          return 'QUINIENTOS ' + Decenas(decenas);
        case 6:
          return 'SEISCIENTOS ' + Decenas(decenas);
        case 7:
          return 'SETECIENTOS ' + Decenas(decenas);
        case 8:
          return 'OCHOCIENTOS ' + Decenas(decenas);
        case 9:
          return 'NOVECIENTOS ' + Decenas(decenas);
      }

      return Decenas(decenas);
    } //Centenas()

    function Seccion(num, divisor, strSingular, strPlural) {
      let cientos = Math.floor(num / divisor)
      let resto = num - (cientos * divisor)

      let letras = '';

      if (cientos > 0)
        if (cientos > 1)
          letras = Centenas(cientos) + ' ' + strPlural;
        else
          letras = strSingular;

      if (resto > 0)
        letras += '';

      return letras;
    } //Seccion()

    function Miles(num) {
      let divisor = 1000;
      let cientos = Math.floor(num / divisor)
      let resto = num - (cientos * divisor)

      let strMiles = Seccion(num, divisor, 'UN MIL', 'MIL');
      let strCentenas = Centenas(resto);

      if (strMiles == '')
        return strCentenas;

      return strMiles + ' ' + strCentenas;
    } //Miles()

    function Millones(num) {
      let divisor = 1000000;
      let cientos = Math.floor(num / divisor)
      let resto = num - (cientos * divisor)

      let strMillones = Seccion(num, divisor, 'UN MILLON DE', 'MILLONES DE');
      let strMiles = Miles(resto);

      if (strMillones == '')
        return strMiles;

      return strMillones + ' ' + strMiles;
    } //Millones()

    return function NumeroALetras(num, currency) {
      currency = currency || {};
      let data = {
        numero: num,
        enteros: Math.floor(num),
        centavos: (((Math.round(num * 100)) - (Math.floor(num) * 100))),
        letrasCentavos: '',
        letrasMonedaPlural: currency.plural || 'PESOS', //'PESOS', 'Dólares', 'Bolívares', 'etcs'
        letrasMonedaSingular: currency.singular || 'PESO', //'PESO', 'Dólar', 'Bolivar', 'etc'
        letrasMonedaCentavoPlural: currency.centPlural || 'CENTAVOS',
        letrasMonedaCentavoSingular: currency.centSingular || 'CENTAVO'
      };

      if (data.centavos > 0) {
        data.letrasCentavos = 'CON ' + (function () {
          if (data.centavos == 1)
            return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoSingular;
          else
            return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoPlural;
        })();
      };

      if (data.enteros == 0)
        return 'CERO ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
      if (data.enteros == 1)
        return Millones(data.enteros) + ' ' + data.letrasMonedaSingular + ' ' + data.letrasCentavos;
      else
        return Millones(data.enteros) + ' ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
    };

  })();
</script>

<script>
  var numeroALetras2 = (function () {

    function Unidades(num) {

      switch (num) {
        case 1:
          return 'UN';
        case 2:
          return 'DOS';
        case 3:
          return 'TRES';
        case 4:
          return 'CUATRO';
        case 5:
          return 'CINCO';
        case 6:
          return 'SEIS';
        case 7:
          return 'SIETE';
        case 8:
          return 'OCHO';
        case 9:
          return 'NUEVE';
      }

      return '';
    } //Unidades()

    function Decenas(num) {

      let decena = Math.floor(num / 10);
      let unidad = num - (decena * 10);

      switch (decena) {
        case 1:
          switch (unidad) {
            case 0:
              return 'DIEZ';
            case 1:
              return 'ONCE';
            case 2:
              return 'DOCE';
            case 3:
              return 'TRECE';
            case 4:
              return 'CATORCE';
            case 5:
              return 'QUINCE';
            default:
              return 'DIECI' + Unidades(unidad);
          }
        case 2:
          switch (unidad) {
            case 0:
              return 'VEINTE';
            default:
              return 'VEINTI' + Unidades(unidad);
          }
        case 3:
          return DecenasY('TREINTA', unidad);
        case 4:
          return DecenasY('CUARENTA', unidad);
        case 5:
          return DecenasY('CINCUENTA', unidad);
        case 6:
          return DecenasY('SESENTA', unidad);
        case 7:
          return DecenasY('SETENTA', unidad);
        case 8:
          return DecenasY('OCHENTA', unidad);
        case 9:
          return DecenasY('NOVENTA', unidad);
        case 0:
          return Unidades(unidad);
      }
    } //Unidades()

    function DecenasY(strSin, numUnidades) {
      if (numUnidades > 0)
        return strSin + ' Y ' + Unidades(numUnidades)

      return strSin;
    } //DecenasY()

    function Centenas(num) {
      let centenas = Math.floor(num / 100);
      let decenas = num - (centenas * 100);

      switch (centenas) {
        case 1:
          if (decenas > 0)
            return 'CIENTO ' + Decenas(decenas);
          return 'CIEN';
        case 2:
          return 'DOSCIENTOS ' + Decenas(decenas);
        case 3:
          return 'TRESCIENTOS ' + Decenas(decenas);
        case 4:
          return 'CUATROCIENTOS ' + Decenas(decenas);
        case 5:
          return 'QUINIENTOS ' + Decenas(decenas);
        case 6:
          return 'SEISCIENTOS ' + Decenas(decenas);
        case 7:
          return 'SETECIENTOS ' + Decenas(decenas);
        case 8:
          return 'OCHOCIENTOS ' + Decenas(decenas);
        case 9:
          return 'NOVECIENTOS ' + Decenas(decenas);
      }

      return Decenas(decenas);
    } //Centenas()

    function Seccion(num, divisor, strSingular, strPlural) {
      let cientos = Math.floor(num / divisor)
      let resto = num - (cientos * divisor)

      let letras = '';

      if (cientos > 0)
        if (cientos > 1)
          letras = Centenas(cientos) + ' ' + strPlural;
        else
          letras = strSingular;

      if (resto > 0)
        letras += '';

      return letras;
    } //Seccion()

    function Miles(num) {
      let divisor = 1000;
      let cientos = Math.floor(num / divisor)
      let resto = num - (cientos * divisor)

      let strMiles = Seccion(num, divisor, 'UN MIL', 'MIL');
      let strCentenas = Centenas(resto);

      if (strMiles == '')
        return strCentenas;

      return strMiles + ' ' + strCentenas;
    } //Miles()

    function Millones(num) {
      let divisor = 1000000;
      let cientos = Math.floor(num / divisor)
      let resto = num - (cientos * divisor)

      let strMillones = Seccion(num, divisor, 'UN MILLON DE', 'MILLONES DE');
      let strMiles = Miles(resto);

      if (strMillones == '')
        return strMiles;

      return strMillones + ' ' + strMiles;
    } //Millones()

    return function NumeroALetras(num, currency) {
      currency = currency || {};
      let data = {
        numero: num,
        enteros: Math.floor(num),
        centavos: (((Math.round(num * 100)) - (Math.floor(num) * 100))),
        letrasCentavos: '',
        letrasMonedaPlural: currency.plural || 'DOLARES', //'PESOS', 'Dólares', 'Bolívares', 'etcs'
        letrasMonedaSingular: currency.singular || 'DOLAR', //'PESO', 'Dólar', 'Bolivar', 'etc'
        letrasMonedaCentavoPlural: currency.centPlural || 'CENTAVOS',
        letrasMonedaCentavoSingular: currency.centSingular || 'CENTAVO'
      };

      if (data.centavos > 0) {
        data.letrasCentavos = 'CON ' + (function () {
          if (data.centavos == 1)
            return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoSingular;
          else
            return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoPlural;
        })();
      };

      if (data.enteros == 0)
        return 'CERO ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
      if (data.enteros == 1)
        return Millones(data.enteros) + ' ' + data.letrasMonedaSingular + ' ' + data.letrasCentavos;
      else
        return Millones(data.enteros) + ' ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
    };

  })();
</script>
@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
}
